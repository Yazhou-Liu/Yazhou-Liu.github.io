<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Github+Hexo博客搭建]]></title>
    <url>%2F2017%2F10%2F21%2FGithub-Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[前言关于Github+Hexo搭建博客的优点网上已经有很多相关的介绍，总结起来就是入门简单，操作方便，简介美观，可扩展性较强等。本文主要介绍Ubuntu环境下基于Github+Hexo的博客搭建，以及在搭建过程中遇到的问题和解决方法。 准备工作准备工作主要包括Node.js和Git的安装，以及Github账号的注册，账号注册在这里就不赘述了，具体参考Github。 安装Node.jsHexo是基于nodeJS环境的静态博客，因为Ubuntu的软件库中的node.js版本较低，不符合Hexo的最低要求，所以这里推荐官方的安装方法：12$ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -$ sudo apt-get install -y nodejs 当然官方也给出了其他系统的安装方法，具体参考Node.js官网。可以通过查看版本验证是否安装成功：123$ node -v$ nodejs -v$ npm -v 我在安装过程中通过其他办法安装出现过node和nodejs版本不同的情况导致Hexo安装失败，所以这里还是推荐官方的安装方法。 安装GitGit是一个非常强大的开源版本控制系统，Ubuntu下安装Git也非常容易：1$ sudo apt-get install git 然后就是设定Git身份信息：12$ git config --global user.name &quot;your github account name&quot;$ git config --global user.email &quot;your github account email&quot; 最后在Gtihub中创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称。这个repo就是后面博客文件的存放位置。 搭建博客剩下的就是博客搭建了，Hexo在博客的搭建和维护上都非常方便。 安装和初始化Hexo执行下面命令来安装Hexo:1$ npm install -g hexo-cli 如果之前的Node.js版本有问题，这里的Hexo会安装失败。安装完成后，为你的博客创建一个文件夹并执行以下命令来初始化你的博客：123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下：123456.├── _config.yml \\博客配置文件├── package.json \\模块版本信息├── scaffolds \\文章等的模板├── source \\文章└── themes \\主题 生成SSH并添加到GitHub在自己电脑上生成本地SSH，然后找到id_rsa.pub文件：12$ ssh-keygen -t rsa -C &quot;youremail@example.com$ cat id_rsa.pub 将文件内容保存到你的Github中，具体可以参考git-ssh 配置和使用。验证是否添加成功：1ssh -T git@github.com 部署博客进入博客的文件夹，输入以下指令：123$ hexo clean$ hexo generate$ hexo server 打开浏览器输入 http://localhost:4000,你就可以看到你的博客了。安装hexo-deployer-git，用来将博客上传到Github:1$ npm install hexo-deployer-git --save 然后执行：123$ hexo clean$ hexo generate$ hexo deploy 在浏览器中输入 http://yourgithubname.github.io 就可以看到你的博客了。通常hexo server用于本地调制，hexo deploy用于发布最终版本。 其他主题和美化Hexo有很多主题可供选择，我用的是Next主题，Next主题是一个比较成熟的主题，里面集成了很多插件和功能，外观也比较简洁美观。主题的安装和美化具体可以参考Next的中文文档。但是这个文档有些内容已经不适合最新的版本，关于文档之外的美化和插件我会在另一篇文章中介绍。 备份和恢复因为Hexo源文件在本地，很多人会遇到换电脑时的博客的备份和回复问题。这里有一个非常好用的解决方案就是用Git来实现备份和恢复。具体方法如下： 备份 创建仓库：yourname.github.io 创建两个分支：master 与 hexo 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo源文件） 在本地博客文件夹建立仓库 git init 关联Github仓库git remote add origin git@github.com:yourname/yourname.github.io.git 依次执行git add .、git commit -m “…”、git push origin hexo备份Hexo源文件执行hexo generate -d生成网站并部署到GitHub上 这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 恢复 使用git clone git@github.com:yourname/yourname.github.io.git拷贝仓库（默认分支为hexo） Hexo常用命令：1234567891011121.生成静态页面：$ hexo generate2.本地预览：$ hexo server或 hexo s //然后打开浏览器输入localhost:4000可以预览博客效果，用于调试3. 新建文章$ hexo new post &quot;title&quot; //新文章位置：/source/_posts4. 新建页面$ hexo new page &quot;title&quot;5. 部署并生成$ hexo d -g6. 清除生成的文件和缓存$ hexo clean]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[又建博客]]></title>
    <url>%2F2017%2F10%2F20%2F%E5%8F%88%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这是第三次建博客，上一次大概实在一年前，也是十月份左右。当时我还在读研，一边在做Research Project，一遍在自学Machine Learning。突然灵光一现又想要做个自己博客，又觉得之前用网上的模板有点low，不符合我技术宅的气质，但html好像又没学过。于是就找到了Hexo这个操作简单，外观看起来不错的工具。想着能记录日常逗逼生活和学习笔记来着，结果写了两篇就不了了之，更是在后面整理Thesis Project的时候连带源文件和备份一起删了。这就导致了现在我又要花半天功夫重新做一个。虽然用的同样是Github Page + Hexo这样的简单结构，连域名都没钱买。但是这次遇到的问题竟然比第一次还多，甚至又让我重装了一遍Ubuntu。最后总算以解决了大部分问题，留下一部分问题以后解决，跳过了少数问题的状态开始写现在这篇博客。希望这次的博客不要像第一次一样短命，能长久的写下去，毕竟人总要进步嘛。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>
